


	1_5 : 1~100까지의 합
	        1+ 2+ 3 +4+   99+100
	      100+99+97+96+   +2+  1
	      
	     => 100*(1+100)/2  
	
	2_4 코드  :  Ex_2_4  코드 
	
	
--------기본 입출력 --Scanner----------------------------------------------
package chap01;

import java.io.FileInputStream;
import java.util.Scanner;

public class Solution_1 {

	public static void main(String[] args) throws Exception {
		System.setIn(new FileInputStream("input/1_1.txt"));
		Scanner sc = new Scanner(System.in);
		int t,r,c;
		char arr[][] = new char[100][100];
		t = sc.nextInt();
		r = sc.nextInt();
		c = sc.nextInt();

		for(int i=0;i<r;++i) {
			String msg = sc.next();
			for(int j=0;j<c;++j) {
				arr[i][j] = msg.charAt(j);
			}
		}
		System.out.printf("%d%n%d %d %n",t,r,c);
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
                System.out.printf("%c",arr[i][j]);
			}
			System.out.println();
		}
	}

}


--------기본 입출력 --BufferedReader----------------------------------------------
package chap01;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Solution_2{

	public static void main(String[] args) throws Exception {
		
		System.setIn(new FileInputStream("input/1_1.txt"));
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int t,r,c;
		char arr[][] = new char[100][100];
		t = Integer.parseInt(in.readLine());
		st = new StringTokenizer(in.readLine());
		r = Integer.parseInt(st.nextToken());
		c = Integer.parseInt(st.nextToken());

		for(int i=0;i<r;++i) {
			String msg = in.readLine();
			for(int j=0;j<c;++j) {
				arr[i][j] = msg.charAt(j);
			}
		}
		System.out.printf("%d%n%d %d %n",t,r,c);
		for(int i=0;i<r;i++) {
			for(int j=0;j<c;j++) {
                System.out.printf("%c",arr[i][j]);
			}
			System.out.println();
		}
	}

}

----------비트연산  1 << i-----------------------------------------------

package chap01;

public class Test2 {

  public static void main(String[] args) {
        for(int i=-5;i<6;++i) {
            System.out.printf("%3d=",i);
            print(i);
            System.out.println();
        }
        
        System.out.println(1<<4);
   }

   public static void print(int n) {
        for(int i=7;i>=0;--i) {
            if((n & (1 << i)) != 0) System.out.printf("1");
            else System.out.printf("0");
        }
   }
}


-------부분집합   i & (1 << j)  -------------------------

public class Test3_부분집합 {
   public static void main(String[] args) {
	 char[] c = {'A','B','C','D'};
         print(c,c.length);
   }
   public static void print(char[] c , int n) {
        for(int i=0;i<(1<<n);++i) {
	        System.out.printf("{");
	        for(int j=0;j<n;++j) {
	              if((i & (1 << j)) != 0) 
		           System.out.printf("%s ",c[j]);
	        }
	        System.out.printf("}%n");
        	
        }
   }
	
}

----------  원소가 2개인 부분집합구하기 -------------

public class Test3_부분집합2 {
	public static void main(String[] args) {
		char[] c = {'A','B','C','D'};
        print(c,c.length);
	}
	public static void print(char[] c , int n) {
        for(int i=0;i<(1<<n);++i) {
        	if(count(i)==2) {
	        	System.out.printf("{");
	            for(int j=0;j<n;++j) {
	            	if((i & (1 << j)) != 0) System.out.printf("%s ",c[j]);
	            }
	        	System.out.printf("}%n");
        	}
        }
	}
	public static int count(int value) {
		int count = 0;
        while (value > 0) {
			if((value & 1) == 1) count++;
			value = value >> 1;
		}
        return count;
	}
	static int bitCount(int value){
    	int count = 0;
    	for(int i=0;i<8;i++) {
    		int t = (value & 1<<i) >0?1:0;
    		count = count+t;
    	}
    	return count;
    }
}

/*            i           1<<j
 * 0        0000          0001
 * 1        0001          0010
 * 2        0010          0100
 * 3        0011          1000
 * 4        0100
 * 5        0101
 * 6        0110
 * 7        0111
 * 8        1000
 * 9        1001
 * 10       1010
 * 11       1011
 * 12       1100
 * 13       1101
 * 14       1110
 * 15       1111
 */

------------------------------------------------------
/*  정올 문제 은행에서 1810 검색 
일곱난장이와 백설공주의 일과는 매일 같다. 
일곱난장이는 일하러 가고 백설공주는 7명분의 식사를 준비한다. 
그런데 어느 날 9명의 난장이가 왔다. 2명의 난장이는 가족이 아니므로 골라내야 한다.

어떻게 할 까 고민하던 공주에게 기막힌 생각이 떠올랐다.
난장이들은 모자에 번호를 써서 다니는데 백설공주의 일곱난장이들의 번호의 합은 정확히 100이었다. 

따라서 9명의 난장이들 중에 모자에 적힌 번호의 합이 100이 되는 7명을 고르면 되는 것이다.

공주를 도와 7명을 고르는 프로그램을 작성해보자.




*/

public class Test3_부분집합_백설공주_for {
	public static void main(String[] args) {
		int[] c = {7,8,10,13,15,19,20,23,25};
		System.out.println(1 << c.length );
        print(c,c.length);
	}
	public static void print(int[] c , int n) {
        for(int i=0;i<(1<<n);++i) {
        	List<Integer> r = new ArrayList<Integer>();
        	int sum = 0;
        	if(count(i)==7) {
	            for(int j=0;j<n;++j) {
	            	if((i & (1 << j)) != 0) {
	            		r.add(c[j]);
	            		sum += c[j];
	            	}
	            }
	        	if(sum == 100) { System.out.println(r);}
        	}
        }
	}
	public static int count(int value) {
		int count = 0;
        while (value > 0) {
			if((value & 1) == 1) count++;
			value = value >> 1;
		}
        return count;
	}
	static int bitCount(int value){
    	int count = 0;
    	for(int i=0;i<9;i++) {
    		int t = (value & 1<<i) >0?1:0;
    		count = count+t;
    	}
    	return count;
    }
}

-------------------------------

public class Main_J1810_백설공주2 {   //부분집합의 합을 구하는 문제    백트랭키    가지치기 

	static int[] data = {1,2};
	static boolean[] V = new boolean[2];

	public static void main(String[] args) throws Exception {
		solve(0,0);
	}

	private static void solve(int idx, int cnt) {
		if(cnt==2||idx==2) {
			System.out.println(Arrays.toString(V));
			return;
		}
                V[idx] =true;
		solve(idx+1, cnt+1);
		
		V[idx] =false;
		solve(idx+1, cnt);
	}
	
	
}


