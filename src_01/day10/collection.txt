
과제풀이
public class Prob5 {
	public static void main(String[] args) {
		Prob5 p5 = new Prob5();
		
		System.out.println(Prob5.leftPad("SDS", 6, '#'));
		System.out.println(Prob5.leftPad("SDS", 5, '$'));
		System.out.println(Prob5.leftPad("SDS", 2, '&'));
	
		System.out.println(p5.rightPad("SDS", 6, '#'));

	}
	//static method 클래스메소드
	public static String leftPad(String str, int size, char padChar) {
		StringBuilder sb = new StringBuilder();
		
		int count = size-str.length();
		for(int i = 0; i<count ;i++) {
			//str = padChar + str;
			sb.append(padChar);
		}
		sb.append(str);
		
	    return sb.toString();	
	}
	
	//instance method : new 를 이용instance 화 한후 주소를 이용 하여 접근  
	public String rightPad(String str, int size, char padChar) {
		StringBuilder sb = new StringBuilder();
		sb.append(str);
		for(int i = 0; i< size-str.length();i++) {
			sb.append(padChar);
		}
	    return sb.toString();	
	}
}


예외처리후 오버라이딩 룰


********  lib 처리 *************************************************
jar cvf util.jar util

클래스path
build path 설정
import 

************ 제네릭 기본 *******************************************************

package day10.collection;

public class Employee<P,T> {
//public class Employee<T extends Number> {
	private P name;
	private T number;
	
	public Employee(P name, T number) {
		this.name = name;
		this.number = number;
	}

	public P getName() {
		return name;
	}

	public void setName(P name) {
		this.name = name;
	}
	~~~
}

public class EmployeeTest {
	public static void main(String[] args) {
	/*	
       Employee<String> emp = new Employee<String>("홍길동", "2019001");
       System.out.println(emp.number.substring(0,4));
       
       Employee<Integer> emp1 = new Employee<Integer>("김길동", 1);
       System.out.println(emp1);
       
       Employee emp2 = new Employee("고길동", 2019002);
       System.out.println(emp2.number);
      */ 
		
	   Employee<String, String> emp1 = 
			   new Employee<String, String>("홍길동","2019-001");
	   System.out.println(emp1);
	   
	   Employee emp2 = new Employee("김길동",9);
	   System.out.println(emp2);
	   
	}
}


------------stack 사용 -------------------------------------------------

public class Test03 {
	public static void main(String[] args) {
		Stack<String> s1 = new Stack<String>();
		s1.push("~~~~");
		System.out.println(s1.peek());
		System.out.println(s1.pop());
		System.out.println(s1.isEmpty());
		
		Stack<Integer> s2 = new Stack<Integer>();
		s2.push(99);
		System.out.println(s2.peek());
		System.out.println(s2.isEmpty());

	}
}


--------------- list 와  배열 ----------------------------------------
public class Test02 {
	public static void main(String[] args) {
		List<String> list = new ArrayList<String>();
		list.add("hello");
		list.add("java");
		list.add("sql");
		list.add("hello");

		Object[] o = new Object[list.size()];
		o=list.toArray();
		
		String[] s = new String[list.size()];
		s = list.toArray(s);
		
		System.out.println(list);
		Collections.sort(list);
		System.out.println(list);
		
		System.out.println("배열");
		Arrays.sort(s);
		System.out.println(Arrays.toString(s));
	}
}

-------------List<Book> 사용 ---------------------------------
package day10.collection;

import java.io.Serializable;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

public class Test03_Book {
	public static void main(String[] args) {
		//List<Book> list = new ArrayList<Book>();
		List<Book> list = new Vector<Book>();
		
		list.add(new Book("java",900));
		list.add(new Book("sql",190));
		list.add(new Book("dB",90));
		list.add(new Book("spring",49900));
		list.add(new Book("spring",49900));
		System.out.println(list);
		
       // list.remove(new Book("sql",190));
        //System.out.println(list);
		//Collections.sort(list);
		//System.out.println(list);
		
		/*
		for(int i=0;i<list.size();i++) {
			//System.out.println(list.get(i).getTitle().charAt(0)+"***");
			System.out.println(list.get(i));
		}
		*/
		
		Iterator<Book> it = list.iterator();
		while (it.hasNext()) {
			Book book = (Book) it.next();
            //System.out.println(book);
			if(book.getTitle().equalsIgnoreCase("spring")) {
				it.remove();
			}
		}
		
		System.out.println(list);
		
		
	}
}


class Book implements Serializable,Comparable<Book>{
	private String title;
	private int price;
	
	~~~	 toString  equals hashcode 오버라이딩 한다 . 
	@Override
	public int compareTo(Book o) {
		return price-o.price;
		//return title.compareTo(o.title);
	}

}

---------Set<Book>  사용 -----------------------------------------

package day10.collection;

public class Test04 {
	public static void main(String[] args) {
		/*
		Set : 순서 보장이 안된다.
		Set<String> set = new HashSet<String>();
		set.add("hello1");
		set.add("hello3");
		set.add("hello9");
		set.add("hello2");
		set.add("hello2");
        System.out.println(set);
        */
        
		Set<Book> set = new TreeSet<Book>();
		set.add(new Book("java",900));
		set.add(new Book("sql",190));
		set.add(new Book("dB",90));
		set.add(new Book("spring",49900));
		set.add(new Book("spring",49900));
		set.add(new Book("sql",190));
		set.add(new Book("sql",190));
		set.add(new Book("sql",190));

		System.out.println(set);
		
		//for(Book data:set) {
		//	System.out.println(data);
		//}
		
		Iterator<Book> it = set.iterator();
		while (it.hasNext()) {
			Book book = (Book) it.next();
            //System.out.println(book);
			if(book.getTitle().equalsIgnoreCase("spring")) {
				it.remove();
			}
		}
		
		
		set.removeIf(i -> i.getTitle().equalsIgnoreCase("db"));
		System.out.println(set);
	}
}


--------------------------------------------------


package day10.collection;

import java.util.HashSet;
import java.util.Set;

public class Test05 {

	public static void main(String[] args) {
		Set<Book> set = new HashSet<Book>();
		set.add(new Book("java",900));
		set.add(new Book("java",900));
		set.add(new Book("sql",190));
		
		Book b1 =  new Book("java",900);
		Book b2 =  new Book("java",900);
		
		System.out.println(b1.hashCode());
		System.out.println(b2.hashCode());
		
		System.out.println(set);
		
		set.forEach(t -> System.out.println(t));
	}

}















