
package lamda;

import java.util.function.Function;

public class Function01 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
      //const sum = (a,b)=>a+b   js
		Function<Integer, Integer> i2 
		  = (i)->i*i;
		  
        i2.apply(4);

	}

}

------------------------
package lamda;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class Lamda_01 {

	public static void main(String[] args) {
		List<Integer> list = new ArrayList<Integer>();
		list.add(5);
		list.add(10);
		list.add(15);
		list.add(20);
		
		for(Integer data:list) {
			System.out.print(data+" ");
		}
		System.out.println();
		list.forEach(new Consumer<Integer>() {
			@Override
			public void accept(Integer t) {
				System.out.print(t+" ");
			}
		});
		System.out.println();
		
		
		list.forEach(
			(Integer t) ->{
				System.out.print(t+" ");
			}
		);
		System.out.println();
		list.forEach( i ->	System.out.print(i+" "));
		list.forEach( System.out::print);

	}
}
------------------------------------

package lamda;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;

public class Lamda_02 {

	public static void main(String[] args) {
		List<Integer> list = new ArrayList<Integer>();
		list.add(5);
		list.add(10);
		list.add(15);
		list.add(20);
		
		
		list.forEach( i ->	System.out.print(i+" "));
		System.out.println();
		
		list.removeIf(i -> i%2==0);
		list.forEach(i -> System.out.print(i+" "));
		System.out.println();
		
		list.replaceAll(i -> i*10);
		list.forEach(i -> System.out.print(i+" "));
		System.out.println();
	}
}
-----------------------------
package lamda;

import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;

public class Lamda_03 {

	public static void main(String[] args) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("id", "root");
		map.put("pw", "1234");
		map.put("ip", "192.168.10.1");
		
		map.forEach(new BiConsumer<String, String>() {
			@Override
			public void accept(String k, String v) {
				System.out.println(k+"="+v);
			}
		});
		System.out.println();
		map.forEach(( k,  v) ->	System.out.println(k+"="+v)	);
		System.out.println();
	}
}

----------------------------------------

package lamda;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.stream.Stream;

public class Lamda_04 {

	public static void main(String[] args) {
		String[] names = {"hong","kim","park","lee"};
		List<String> list = Arrays.asList(names);

		list.forEach(name -> System.out.print(name+" "));
		System.out.println();
		
		Stream<String> stream = list.stream();
		
		//stream.sorted().forEach(name -> System.out.print(name+" "));
		//stream.sorted().forEach( System.out::println);

		
		stream.filter(name -> name.equals("lee")||name.equals("kim")).forEach( System.out::println);
	}
}

----------------------------------

package lamda;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Stream;

public class Sample01 {

	public static void main(String[] args) {
		
		List<String> list = new ArrayList<String>();
		list.add("hello");
		list.add("fff");
		list.add("heffflo");
		list.add("helffffo");
		list.add("hsssello");
		
		
		int sum = list.stream().filter(i -> i.length()>5).mapToInt(i->i.length()).sum();
		System.out.println(sum);
		
		int count = (int) list.stream().filter(i -> i.length()>5).count();
		System.out.println(count);

		Stream.of(1,2,3,4,5,6,7,8,9)
		.filter(i -> (i%2==0))
		.forEach(i -> System.out.println(i));
		
		
		System.out.println("~~~");
	}

}

------------------------------

package lamda;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Stream;

public class Sample02_Book {

	public static void main(String[] args) {
		
		List<Book> list = new ArrayList<Book>();
		list.add(new Book("java",600));
		list.add(new Book("sql",900));
		list.add(new Book("Database",700));
		list.add(new Book("html",1600));
		list.add(new Book("js",6900));
		
		
		int sum = list.stream().filter(i -> i.getPrice()>5000).mapToInt(i->i.getPrice()).sum();
		System.out.println(sum);
		
		int count = (int) list.stream().filter(i -> i.getPrice()>5000).count();
		System.out.println(count);

		Stream.of(1,2,3,4,5,6,7,8,9)
		.filter(i -> (i%2==0))
		.forEach(i -> System.out.println(i));
		
		
		System.out.println("---------------------");
		Book[] books = {
				new Book("java",9900),
				new Book("sql",900),
				new Book("spring",19900),
				new Book("html5",300),
		};
		
		Stream.of(books)
		.filter(i -> i.getPrice()>9900)
		.forEach(i->System.out.println(i));
        System.out.println("----------------------");
        
		Stream.of(books)
		.sorted((i,j)->	i.price - j.price)
		.forEach(i->System.out.println(i));

		
	}

}
-------------------------------
package lamda;

import java.util.function.IntSupplier;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public class Stream04 {

	public static void main(String[] args) {
		
		// Stream.iterate
		Stream.iterate(0,n -> n + 2)
		      .limit(10)
		      .forEach(System.out::print);

		System.out.println();
		// Stream.iterate
		Stream.iterate(0,n -> n + 2)
		      .limit(10)
		      .skip(3)
		      .forEach(i-> System.out.print(i+", "));

		System.out.println();
		// Stream.iterate
		Stream.iterate(0,n -> n + 2)
		      .limit(10)
		      .skip(3)
		      .map(i-> i*i)
	          .forEach(i-> System.out.print(i+", "));

		System.out.println();
		// Stream.iterate
		Stream.iterate(0,n -> n + 2)
		      .limit(15)
		      .filter(i-> (i%5) == 0)
	          .forEach(i-> System.out.print(i+", "));
		System.out.println();

		// fibonnaci with iterate
		Stream.iterate(new int[] { 0, 1 }, t -> new int[] { t[1], t[0] + t[1] }) // 여기서 t[0],t[1]이 어디서
				.limit(10)// 온건 가요?
				.forEach(t -> System.out.println("(" + t[0] + ", " + t[1] + ")"));

		Stream.iterate(new int[] { 0, 1 }, t -> new int[] { t[1], t[0] + t[1] }).limit(10).map(t -> t[0])
				.forEach(System.out::println);

		// random stream of doubles with Stream.generate
		Stream.generate(Math::random) //
				.limit(10).forEach(System.out::println);

		// stream of 1s with Stream.generate
		IntStream.generate(() -> 1).limit(5).forEach(System.out::println);

		IntStream.generate(new IntSupplier() {
			public int getAsInt() {
				return 2;
			}
		}).limit(5).forEach(System.out::println);

		IntSupplier fib = new IntSupplier() {
			private int previous = 0;
			private int current = 1;

			public int getAsInt() {
				int nextValue = this.previous + this.current;
				this.previous = this.current;
				this.current = nextValue;
				return this.previous;
			}
		};
		IntStream.generate(fib).limit(10).forEach(System.out::println);

		/*
		 * long uniqueWords = Files.lines(Paths.get("lambdasinaction/chap5/data.txt"),
		 * Charset.defaultCharset()) .flatMap(line -> Arrays.stream(line.split(" ")))
		 * .distinct() .count();
		 * 
		 * System.out.println("There are " + uniqueWords + " unique words in data.txt");
		 */

	}

}


	
